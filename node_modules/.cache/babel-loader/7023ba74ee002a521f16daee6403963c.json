{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, divProperties, doesElementContainFocus, getDocument, getNativeProps, getPropsWithDefaults, getWindow, modalize } from '../../Utilities';\nimport { useMergedRefs, useAsync, useOnEvent } from '@fluentui/react-hooks';\nimport { useWindow } from '@fluentui/react-window-provider';\n\nfunction useScrollbarAsync(props, root) {\n  var async = useAsync();\n\n  var _a = React.useState(false),\n      needsVerticalScrollBarState = _a[0],\n      setNeedsVerticalScrollBar = _a[1];\n\n  React.useEffect(function () {\n    async.requestAnimationFrame(function () {\n      var _a; // If overflowY is overridden, don't waste time calculating whether the scrollbar is necessary.\n\n\n      if (props.style && props.style.overflowY) {\n        return;\n      }\n\n      var needsVerticalScrollBar = false;\n\n      if (root && root.current && ((_a = root.current) === null || _a === void 0 ? void 0 : _a.firstElementChild)) {\n        // ClientHeight returns the client height of an element rounded to an\n        // integer. On some browsers at different zoom levels this rounding\n        // can generate different results for the root container and child even\n        // though they are the same height. This causes us to show a scroll bar\n        // when not needed. Ideally we would use BoundingClientRect().height\n        // instead however seems that the API is 90% slower than using ClientHeight.\n        // Therefore instead we will calculate the difference between heights and\n        // allow for a 1px difference to still be considered ok and not show the\n        // scroll bar.\n        var rootHeight = root.current.clientHeight;\n        var firstChildHeight = root.current.firstElementChild.clientHeight;\n\n        if (rootHeight > 0 && firstChildHeight > rootHeight) {\n          needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n        }\n      }\n\n      if (needsVerticalScrollBarState !== needsVerticalScrollBar) {\n        setNeedsVerticalScrollBar(needsVerticalScrollBar);\n      }\n    });\n    return function () {\n      return async.dispose();\n    };\n  });\n  return needsVerticalScrollBarState;\n}\n\nfunction defaultFocusRestorer(options) {\n  var originalElement = options.originalElement,\n      containsFocus = options.containsFocus;\n\n  if (originalElement && containsFocus && originalElement !== getWindow()) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    // This is wrapped in a setTimeout because of a React 16 bug that is resolved in 17.\n    // Once we move to 17, the setTimeout should be removed (ref: https://github.com/facebook/react/issues/17894#issuecomment-656094405)\n    setTimeout(function () {\n      var _a;\n\n      (_a = originalElement.focus) === null || _a === void 0 ? void 0 : _a.call(originalElement);\n    }, 0);\n  }\n}\n\nfunction useRestoreFocus(props, root) {\n  var _a = props.onRestoreFocus,\n      onRestoreFocus = _a === void 0 ? defaultFocusRestorer : _a;\n  var originalFocusedElement = React.useRef();\n  var containsFocus = React.useRef(false);\n  React.useEffect(function () {\n    originalFocusedElement.current = getDocument().activeElement;\n\n    if (doesElementContainFocus(root.current)) {\n      containsFocus.current = true;\n    }\n\n    return function () {\n      var _a;\n\n      onRestoreFocus === null || onRestoreFocus === void 0 ? void 0 : onRestoreFocus({\n        originalElement: originalFocusedElement.current,\n        containsFocus: containsFocus.current,\n        documentContainsFocus: ((_a = getDocument()) === null || _a === void 0 ? void 0 : _a.hasFocus()) || false\n      }); // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n\n      originalFocusedElement.current = undefined;\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n  useOnEvent(root, 'focus', React.useCallback(function () {\n    containsFocus.current = true;\n  }, []), true);\n  useOnEvent(root, 'blur', React.useCallback(function (ev) {\n    /** The popup should update this._containsFocus when:\n     * relatedTarget exists AND\n     * the relatedTarget is not contained within the popup.\n     * If the relatedTarget is within the popup, that means the popup still has focus\n     * and focused moved from one element to another within the popup.\n     * If relatedTarget is undefined or null that usually means that a\n     * keyboard event occurred and focus didn't change\n     */\n    if (root.current && ev.relatedTarget && !root.current.contains(ev.relatedTarget)) {\n      containsFocus.current = false;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n\n  }, []), true);\n}\n\nfunction useHideSiblingNodes(props, root) {\n  // eslint-disable-next-line deprecation/deprecation\n  var shouldHideSiblings = String(props['aria-modal']).toLowerCase() === 'true' && props.enableAriaHiddenSiblings;\n  React.useEffect(function () {\n    if (!(shouldHideSiblings && root.current)) {\n      return;\n    }\n\n    var unmodalize = modalize(root.current);\n    return unmodalize;\n  }, [root, shouldHideSiblings]);\n}\n/**\n * This adds accessibility to Dialog and Panel controls\n */\n\n\nexport var Popup = React.forwardRef(function (propsWithoutDefaults, forwardedRef) {\n  var props = getPropsWithDefaults({\n    shouldRestoreFocus: true,\n    enableAriaHiddenSiblings: true\n  }, propsWithoutDefaults);\n  var root = React.useRef();\n  var mergedRootRef = useMergedRefs(root, forwardedRef);\n  useHideSiblingNodes(props, root);\n  useRestoreFocus(props, root);\n  var role = props.role,\n      className = props.className,\n      ariaLabel = props.ariaLabel,\n      ariaLabelledBy = props.ariaLabelledBy,\n      ariaDescribedBy = props.ariaDescribedBy,\n      style = props.style,\n      children = props.children,\n      onDismiss = props.onDismiss;\n  var needsVerticalScrollBar = useScrollbarAsync(props, root);\n  var onKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.escape:\n        if (onDismiss) {\n          onDismiss(ev);\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n\n        break;\n    }\n  }, [onDismiss]);\n  var win = useWindow();\n  useOnEvent(win, 'keydown', onKeyDown);\n  return React.createElement(\"div\", __assign({\n    ref: mergedRootRef\n  }, getNativeProps(props, divProperties), {\n    className: className,\n    role: role,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    onKeyDown: onKeyDown,\n    style: __assign({\n      overflowY: needsVerticalScrollBar ? 'scroll' : undefined,\n      outline: 'none'\n    }, style)\n  }), children);\n});\nPopup.displayName = 'Popup';","map":null,"metadata":{},"sourceType":"module"}