{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Fabric } from '../../Fabric';\nimport { classNamesFunction, setPortalAttribute, setVirtualParent } from '../../Utilities';\nimport { registerLayer, getDefaultTarget, unregisterLayer } from './Layer.notification';\nimport { useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport { useDocument } from '../../WindowProvider';\nvar getClassNames = classNamesFunction();\nexport var LayerBase = React.forwardRef(function (props, ref) {\n  var rootRef = React.useRef(null);\n  var mergedRef = useMergedRefs(rootRef, ref);\n  var layerRef = React.useRef(); // Tracks if the layer mount events need to be raised.\n  // Required to allow the DOM to render after the layer element is added.\n\n  var _a = React.useState(false),\n      needRaiseLayerMount = _a[0],\n      setNeedRaiseLayerMount = _a[1];\n\n  var doc = useDocument();\n  var eventBubblingEnabled = props.eventBubblingEnabled,\n      styles = props.styles,\n      theme = props.theme,\n      className = props.className,\n      children = props.children,\n      hostId = props.hostId,\n      _b = props.onLayerDidMount,\n      onLayerDidMount = _b === void 0 ? function () {\n    return undefined;\n  } : _b,\n      // eslint-disable-next-line deprecation/deprecation\n  _c = props.onLayerMounted,\n      // eslint-disable-next-line deprecation/deprecation\n  onLayerMounted = _c === void 0 ? function () {\n    return undefined;\n  } : _c,\n      onLayerWillUnmount = props.onLayerWillUnmount,\n      insertFirst = props.insertFirst;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    isNotHost: !hostId\n  }); // Returns the user provided hostId props element, the default target selector,\n  // or undefined if document doesn't exist.\n\n  var getHost = function () {\n    if (!doc) {\n      return undefined;\n    }\n\n    if (hostId) {\n      return doc.getElementById(hostId);\n    } else {\n      var defaultHostSelector = getDefaultTarget();\n      return defaultHostSelector ? doc.querySelector(defaultHostSelector) : doc.body;\n    }\n  }; // Removes the current layer element's parentNode and runs onLayerWillUnmount prop if provided.\n\n\n  var removeLayerElement = function () {\n    onLayerWillUnmount === null || onLayerWillUnmount === void 0 ? void 0 : onLayerWillUnmount();\n    var elem = layerRef.current; // Clear ref before removing from the DOM\n\n    layerRef.current = undefined;\n\n    if (elem && elem.parentNode) {\n      elem.parentNode.removeChild(elem);\n    }\n  }; // If a doc or host exists, it will remove and update layer parentNodes.\n\n\n  var createLayerElement = function () {\n    var host = getHost();\n\n    if (!doc || !host) {\n      return;\n    } // Remove and re-create any previous existing layer elements.\n\n\n    removeLayerElement();\n    var el = doc.createElement('div');\n    el.className = classNames.root;\n    setPortalAttribute(el);\n    setVirtualParent(el, rootRef.current);\n    insertFirst ? host.insertBefore(el, host.firstChild) : host.appendChild(el);\n    layerRef.current = el;\n    setNeedRaiseLayerMount(true);\n  }; // eslint-disable-next-line no-restricted-properties\n\n\n  React.useLayoutEffect(function () {\n    createLayerElement(); // Check if the user provided a hostId prop and register the layer with the ID.\n\n    if (hostId) {\n      registerLayer(hostId, createLayerElement);\n    }\n\n    return function () {\n      removeLayerElement();\n\n      if (hostId) {\n        unregisterLayer(hostId, createLayerElement);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps -- should run if the hostId updates.\n  }, [hostId]);\n  React.useEffect(function () {\n    if (layerRef.current && needRaiseLayerMount) {\n      onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();\n      onLayerDidMount === null || onLayerDidMount === void 0 ? void 0 : onLayerDidMount();\n      setNeedRaiseLayerMount(false);\n    }\n  }, [needRaiseLayerMount, onLayerMounted, onLayerDidMount]);\n  useDebugWarnings(props);\n  return React.createElement(\"span\", {\n    className: \"ms-layer\",\n    ref: mergedRef\n  }, layerRef.current && ReactDOM.createPortal(\n  /* eslint-disable deprecation/deprecation */\n  React.createElement(Fabric, __assign({}, !eventBubblingEnabled && getFilteredEvents(), {\n    className: classNames.content\n  }), children),\n  /* eslint-enable deprecation/deprecation */\n  layerRef.current));\n});\nLayerBase.displayName = 'LayerBase';\nvar filteredEventProps;\n\nvar onFilterEvent = function (ev) {\n  // We should just be able to check ev.bubble here and only stop events that are bubbling up. However, even though\n  // mouseenter and mouseleave do NOT bubble up, they are showing up as bubbling. Therefore we stop events based on\n  // event name rather than ev.bubble.\n  if (ev.eventPhase === Event.BUBBLING_PHASE && ev.type !== 'mouseenter' && ev.type !== 'mouseleave' && ev.type !== 'touchstart' && ev.type !== 'touchend') {\n    ev.stopPropagation();\n  }\n};\n\nfunction getFilteredEvents() {\n  if (!filteredEventProps) {\n    filteredEventProps = {};\n    ['onClick', 'onContextMenu', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOver', 'onMouseOut', 'onMouseUp', 'onTouchMove', 'onTouchStart', 'onTouchCancel', 'onTouchEnd', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onFocus', 'onBlur', 'onChange', 'onInput', 'onInvalid', 'onSubmit'].forEach(function (name) {\n      return filteredEventProps[name] = onFilterEvent;\n    });\n  }\n\n  return filteredEventProps;\n}\n\nfunction useDebugWarnings(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Layer',\n      props: props,\n      deprecations: {\n        onLayerMounted: 'onLayerDidMount'\n      }\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}