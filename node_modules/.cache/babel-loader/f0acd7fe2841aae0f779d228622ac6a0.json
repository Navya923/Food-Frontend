{"ast":null,"code":"import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.\n */\n\nexport var useResponsiveMode = function (elementRef, overrideResponsiveMode) {\n  var _a = React.useState(getInitialResponsiveMode()),\n      lastResponsiveMode = _a[0],\n      setLastResponsiveMode = _a[1];\n\n  var onResize = React.useCallback(function () {\n    var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current)); // Setting the same value should not cause a re-render.\n\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n  var win = useWindow();\n  useOnEvent(win, 'resize', onResize); // Call resize function initially on mount, or if the override changes from defined to undefined\n  // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)\n\n  React.useEffect(function () {\n    if (overrideResponsiveMode === undefined) {\n      onResize();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes\n\n  }, [overrideResponsiveMode]);\n  return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;\n};","map":null,"metadata":{},"sourceType":"module"}