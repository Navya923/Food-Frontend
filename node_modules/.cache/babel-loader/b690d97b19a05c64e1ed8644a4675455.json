{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { elementContains, getNativeProps, divProperties, getFirstTabbable, getLastTabbable, getNextElement, focusAsync, modalize, on } from '../../Utilities';\nimport { useId, useConst, useMergedRefs } from '@fluentui/react-hooks';\nimport { useDocument } from '../../WindowProvider';\nvar COMPONENT_NAME = 'FocusTrapZone';\n\nvar useComponentRef = function (componentRef, previouslyFocusedElement, focus) {\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      get previouslyFocusedElement() {\n        return previouslyFocusedElement;\n      },\n\n      focus: focus\n    };\n  }, [previouslyFocusedElement, focus]);\n};\n\nexport var FocusTrapZone = React.forwardRef(function (props, ref) {\n  var root = React.useRef(null);\n  var firstBumper = React.useRef(null);\n  var lastBumper = React.useRef(null);\n  var mergedRootRef = useMergedRefs(root, ref);\n  var id = useId(undefined, props.id);\n  var doc = useDocument();\n  var divProps = getNativeProps(props, divProperties);\n  var internalState = useConst(function () {\n    return {\n      previouslyFocusedElementOutsideTrapZone: undefined,\n      previouslyFocusedElementInTrapZone: undefined,\n      disposeFocusHandler: undefined,\n      disposeClickHandler: undefined,\n      hasFocus: false,\n      unmodalize: undefined\n    };\n  });\n  var ariaLabelledBy = props.ariaLabelledBy,\n      className = props.className,\n      children = props.children,\n      componentRef = props.componentRef,\n      disabled = props.disabled,\n      _a = props.disableFirstFocus,\n      disableFirstFocus = _a === void 0 ? false : _a,\n      _b = props.disabled,\n      currentDisabledValue = _b === void 0 ? false : _b,\n      elementToFocusOnDismiss = props.elementToFocusOnDismiss,\n      _c = props.forceFocusInsideTrap,\n      forceFocusInsideTrap = _c === void 0 ? true : _c,\n      focusPreviouslyFocusedInnerElement = props.focusPreviouslyFocusedInnerElement,\n      // eslint-disable-next-line deprecation/deprecation\n  firstFocusableSelector = props.firstFocusableSelector,\n      firstFocusableTarget = props.firstFocusableTarget,\n      ignoreExternalFocusing = props.ignoreExternalFocusing,\n      _d = props.isClickableOutsideFocusTrap,\n      isClickableOutsideFocusTrap = _d === void 0 ? false : _d,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onFocusCapture = props.onFocusCapture,\n      onBlurCapture = props.onBlurCapture,\n      enableAriaHiddenSiblings = props.enableAriaHiddenSiblings;\n  var bumperProps = {\n    'aria-hidden': true,\n    style: {\n      pointerEvents: 'none',\n      position: 'fixed' // 'fixed' prevents browsers from scrolling to bumpers when viewport does not contain them\n\n    },\n    tabIndex: disabled ? -1 : 0,\n    'data-is-visible': true,\n    'data-is-focus-trap-zone-bumper': true\n  };\n  var focus = React.useCallback(function () {\n    if (focusPreviouslyFocusedInnerElement && internalState.previouslyFocusedElementInTrapZone && elementContains(root.current, internalState.previouslyFocusedElementInTrapZone)) {\n      // focus on the last item that had focus in the zone before we left the zone\n      focusAsync(internalState.previouslyFocusedElementInTrapZone);\n      return;\n    }\n\n    var focusSelector = typeof firstFocusableSelector === 'string' ? firstFocusableSelector : firstFocusableSelector && firstFocusableSelector();\n    var firstFocusableChild = null;\n\n    if (root.current) {\n      if (typeof firstFocusableTarget === 'string') {\n        firstFocusableChild = root.current.querySelector(firstFocusableTarget);\n      } else if (firstFocusableTarget) {\n        firstFocusableChild = firstFocusableTarget(root.current);\n      } else if (focusSelector) {\n        firstFocusableChild = root.current.querySelector('.' + focusSelector);\n      } // Fall back to first element if query selector did not match any elements.\n\n\n      if (!firstFocusableChild) {\n        firstFocusableChild = getNextElement(root.current, root.current.firstChild, false, false, false, true);\n      }\n    }\n\n    if (firstFocusableChild) {\n      focusAsync(firstFocusableChild);\n    }\n  }, [firstFocusableSelector, firstFocusableTarget, focusPreviouslyFocusedInnerElement, internalState]);\n  var onBumperFocus = React.useCallback(function (isFirstBumper) {\n    if (disabled) {\n      return;\n    }\n\n    var currentBumper = isFirstBumper === internalState.hasFocus ? lastBumper.current : firstBumper.current;\n\n    if (root.current) {\n      var nextFocusable = isFirstBumper === internalState.hasFocus ? getLastTabbable(root.current, currentBumper, true, false) : getFirstTabbable(root.current, currentBumper, true, false);\n\n      if (nextFocusable) {\n        if (nextFocusable === firstBumper.current || nextFocusable === lastBumper.current) {\n          // This can happen when FTZ contains no tabbable elements.\n          // focus will take care of finding a focusable element in FTZ.\n          focus();\n        } else {\n          nextFocusable.focus();\n        }\n      }\n    }\n  }, [disabled, focus, internalState]);\n  var onRootBlurCapture = React.useCallback(function (ev) {\n    onBlurCapture === null || onBlurCapture === void 0 ? void 0 : onBlurCapture(ev);\n    var relatedTarget = ev.relatedTarget;\n\n    if (ev.relatedTarget === null) {\n      // In IE11, due to lack of support, event.relatedTarget is always\n      // null making every onBlur call to be \"outside\" of the root\n      // even when it's not. Using document.activeElement is another way\n      // for us to be able to get what the relatedTarget without relying\n      // on the event\n      relatedTarget = doc.activeElement;\n    }\n\n    if (!elementContains(root.current, relatedTarget)) {\n      internalState.hasFocus = false;\n    }\n  }, [doc, internalState, onBlurCapture]);\n  var onRootFocusCapture = React.useCallback(function (ev) {\n    onFocusCapture === null || onFocusCapture === void 0 ? void 0 : onFocusCapture(ev);\n\n    if (ev.target === firstBumper.current) {\n      onBumperFocus(true);\n    } else if (ev.target === lastBumper.current) {\n      onBumperFocus(false);\n    }\n\n    internalState.hasFocus = true;\n\n    if (ev.target !== ev.currentTarget && !(ev.target === firstBumper.current || ev.target === lastBumper.current)) {\n      // every time focus changes within the trap zone, remember the focused element so that\n      // it can be restored if focus leaves the pane and returns via keystroke (i.e. via a call to this.focus(true))\n      internalState.previouslyFocusedElementInTrapZone = ev.target;\n    }\n  }, [onFocusCapture, internalState, onBumperFocus]);\n  var returnFocusToInitiator = React.useCallback(function () {\n    FocusTrapZone.focusStack = FocusTrapZone.focusStack.filter(function (value) {\n      return id !== value;\n    });\n\n    if (doc) {\n      var activeElement = doc.activeElement;\n\n      if (!ignoreExternalFocusing && internalState.previouslyFocusedElementOutsideTrapZone && typeof internalState.previouslyFocusedElementOutsideTrapZone.focus === 'function' && (elementContains(root.current, activeElement) || activeElement === doc.body)) {\n        if (!(internalState.previouslyFocusedElementOutsideTrapZone === firstBumper.current || internalState.previouslyFocusedElementOutsideTrapZone === lastBumper.current)) {\n          focusAsync(internalState.previouslyFocusedElementOutsideTrapZone);\n        }\n      }\n    }\n  }, [doc, id, ignoreExternalFocusing, internalState]);\n  var forceFocusInTrap = React.useCallback(function (ev) {\n    if (disabled) {\n      return;\n    }\n\n    if (FocusTrapZone.focusStack.length && id === FocusTrapZone.focusStack[FocusTrapZone.focusStack.length - 1]) {\n      var focusedElement = ev.target;\n\n      if (!elementContains(root.current, focusedElement)) {\n        focus();\n        internalState.hasFocus = true; // set focus here since we stop event propagation\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [disabled, id, focus, internalState]);\n  var forceClickInTrap = React.useCallback(function (ev) {\n    if (disabled) {\n      return;\n    }\n\n    if (FocusTrapZone.focusStack.length && id === FocusTrapZone.focusStack[FocusTrapZone.focusStack.length - 1]) {\n      var clickedElement = ev.target;\n\n      if (clickedElement && !elementContains(root.current, clickedElement)) {\n        focus();\n        internalState.hasFocus = true; // set focus here since we stop event propagation\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [disabled, id, focus, internalState]);\n  var updateEventHandlers = React.useCallback(function () {\n    if (forceFocusInsideTrap && !internalState.disposeFocusHandler) {\n      internalState.disposeFocusHandler = on(window, 'focus', forceFocusInTrap, true);\n    } else if (!forceFocusInsideTrap && internalState.disposeFocusHandler) {\n      internalState.disposeFocusHandler();\n      internalState.disposeFocusHandler = undefined;\n    }\n\n    if (!isClickableOutsideFocusTrap && !internalState.disposeClickHandler) {\n      internalState.disposeClickHandler = on(window, 'click', forceClickInTrap, true);\n    } else if (isClickableOutsideFocusTrap && internalState.disposeClickHandler) {\n      internalState.disposeClickHandler();\n      internalState.disposeClickHandler = undefined;\n    }\n  }, [forceClickInTrap, forceFocusInTrap, forceFocusInsideTrap, isClickableOutsideFocusTrap, internalState]); // Updates eventHandlers and cleans up focusStack when the component unmounts.\n\n  React.useEffect(function () {\n    var parentRoot = root.current;\n    updateEventHandlers();\n    return function () {\n      // don't handle return focus unless forceFocusInsideTrap is true or focus is still within FocusTrapZone\n      if (!disabled || forceFocusInsideTrap || !elementContains(parentRoot, doc === null || doc === void 0 ? void 0 : doc.activeElement)) {\n        returnFocusToInitiator();\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run on mount.\n  }, [updateEventHandlers]); // Updates focusStack and the previouslyFocusedElementOutsideTrapZone on prop change.\n\n  React.useEffect(function () {\n    var newForceFocusInsideTrap = forceFocusInsideTrap !== undefined ? forceFocusInsideTrap : true;\n    var newDisabled = disabled !== undefined ? disabled : false; // Transition from forceFocusInsideTrap / FTZ disabled to enabled.\n\n    if (!newDisabled || newForceFocusInsideTrap) {\n      if (currentDisabledValue) {\n        return;\n      }\n\n      FocusTrapZone.focusStack.push(id);\n      internalState.previouslyFocusedElementOutsideTrapZone = elementToFocusOnDismiss ? elementToFocusOnDismiss : doc.activeElement;\n\n      if (!disableFirstFocus && !elementContains(root.current, internalState.previouslyFocusedElementOutsideTrapZone)) {\n        focus();\n      }\n\n      if (!internalState.unmodalize && root.current && enableAriaHiddenSiblings) {\n        internalState.unmodalize = modalize(root.current);\n      }\n    } else if (!newForceFocusInsideTrap || newDisabled) {\n      // Transition from forceFocusInsideTrap / FTZ enabled to disabled.\n      returnFocusToInitiator();\n\n      if (internalState.unmodalize) {\n        internalState.unmodalize();\n      }\n    }\n\n    if (elementToFocusOnDismiss && internalState.previouslyFocusedElementOutsideTrapZone !== elementToFocusOnDismiss) {\n      internalState.previouslyFocusedElementOutsideTrapZone = elementToFocusOnDismiss;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [elementToFocusOnDismiss, forceFocusInsideTrap, disabled]); // Cleanup lifecyle method for internalState.\n\n  useUnmount(function () {\n    // Dispose of event handlers so their closures can be garbage-collected\n    if (internalState.disposeClickHandler) {\n      internalState.disposeClickHandler();\n      internalState.disposeClickHandler = undefined;\n    }\n\n    if (internalState.disposeFocusHandler) {\n      internalState.disposeFocusHandler();\n      internalState.disposeFocusHandler = undefined;\n    }\n\n    if (internalState.unmodalize) {\n      internalState.unmodalize();\n    } // Dispose of element references so the DOM Nodes can be garbage-collected\n\n\n    delete internalState.previouslyFocusedElementInTrapZone;\n    delete internalState.previouslyFocusedElementOutsideTrapZone;\n  });\n  useComponentRef(componentRef, internalState.previouslyFocusedElementInTrapZone, focus);\n  return React.createElement(\"div\", __assign({}, divProps, {\n    className: className,\n    ref: mergedRootRef,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocusCapture: onRootFocusCapture,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onBlurCapture: onRootBlurCapture\n  }), React.createElement(\"div\", __assign({}, bumperProps, {\n    ref: firstBumper\n  })), children, React.createElement(\"div\", __assign({}, bumperProps, {\n    ref: lastBumper\n  })));\n});\n\nvar useUnmount = function (unmountFunction) {\n  var unmountRef = React.useRef(unmountFunction);\n  unmountRef.current = unmountFunction;\n  React.useEffect(function () {\n    return function () {\n      if (unmountRef.current) {\n        unmountRef.current();\n      }\n    };\n  }, [unmountFunction]);\n};\n\nFocusTrapZone.displayName = COMPONENT_NAME;\nFocusTrapZone.focusStack = [];","map":null,"metadata":{},"sourceType":"module"}