{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../ResponsiveMode';\nvar getClassNames = classNamesFunction();\nimport { DialogContent } from './DialogContent';\nvar DefaultModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n  enableAriaHiddenSiblings: true\n};\nvar DefaultDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: []\n}; // eslint-disable-next-line deprecation/deprecation\n\nvar DialogBase =\n/** @class */\nfunction (_super) {\n  __extends(DialogBase, _super);\n\n  function DialogBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getSubTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaDescribedById = _a.ariaDescribedById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          subText = _a.subText;\n      var id = modalProps && modalProps.subtitleAriaId || ariaDescribedById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.subText || subText) && _this._defaultSubTextId;\n      }\n\n      return id;\n    };\n\n    _this._getTitleTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaLabelledById = _a.ariaLabelledById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          title = _a.title;\n      var id = modalProps && modalProps.titleAriaId || ariaLabelledById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.title || title) && _this._defaultTitleTextId;\n      }\n\n      return id;\n    };\n\n    _this._id = getId('Dialog');\n    _this._defaultTitleTextId = _this._id + '-title';\n    _this._defaultSubTextId = _this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId'\n      });\n    }\n\n    return _this;\n  }\n\n  DialogBase.prototype.render = function () {\n    var _a, _b;\n\n    var props = this.props;\n    var\n    /* eslint-disable deprecation/deprecation */\n    className = props.className,\n        containerClassName = props.containerClassName,\n        contentClassName = props.contentClassName,\n        elementToFocusOnDismiss = props.elementToFocusOnDismiss,\n        firstFocusableSelector = props.firstFocusableSelector,\n        forceFocusInsideTrap = props.forceFocusInsideTrap,\n        styles = props.styles,\n        hidden = props.hidden,\n        ignoreExternalFocusing = props.ignoreExternalFocusing,\n        isBlocking = props.isBlocking,\n        isClickableOutsideFocusTrap = props.isClickableOutsideFocusTrap,\n        isDarkOverlay = props.isDarkOverlay,\n        _c = props.isOpen,\n        isOpen = _c === void 0 ? !hidden : _c,\n        onDismiss = props.onDismiss,\n        onDismissed = props.onDismissed,\n        onLayerDidMount = props.onLayerDidMount,\n        responsiveMode = props.responsiveMode,\n        subText = props.subText,\n        theme = props.theme,\n        title = props.title,\n        topButtonsProps = props.topButtonsProps,\n        type = props.type,\n\n    /* eslint-enable deprecation/deprecation */\n    minWidth = props.minWidth,\n        maxWidth = props.maxWidth,\n        modalProps = props.modalProps;\n\n    var mergedLayerProps = __assign({\n      onLayerDidMount: onLayerDidMount\n    }, modalProps === null || modalProps === void 0 ? void 0 : modalProps.layerProps);\n\n    var dialogDraggableClassName;\n    var dragOptions = modalProps === null || modalProps === void 0 ? void 0 : modalProps.dragOptions; // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n\n    if (dragOptions && !dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions.dragHandleSelector = \".\" + dialogDraggableClassName;\n    }\n\n    var mergedModalProps = __assign(__assign(__assign(__assign({}, DefaultModalProps), {\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      firstFocusableSelector: firstFocusableSelector,\n      forceFocusInsideTrap: forceFocusInsideTrap,\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      isClickableOutsideFocusTrap: isClickableOutsideFocusTrap,\n      responsiveMode: responsiveMode,\n      className: className,\n      containerClassName: containerClassName,\n      isBlocking: isBlocking,\n      isDarkOverlay: isDarkOverlay,\n      onDismissed: onDismissed\n    }), modalProps), {\n      layerProps: mergedLayerProps,\n      dragOptions: dragOptions,\n      isOpen: isOpen\n    });\n\n    var dialogContentProps = __assign(__assign(__assign({\n      className: contentClassName,\n      subText: subText,\n      title: title,\n      topButtonsProps: topButtonsProps,\n      type: type\n    }, DefaultDialogContentProps), props.dialogContentProps), {\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: __assign({\n        // eslint-disable-next-line deprecation/deprecation\n        id: ((_a = props.dialogContentProps) === null || _a === void 0 ? void 0 : _a.titleId) || this._defaultTitleTextId\n      }, (_b = props.dialogContentProps) === null || _b === void 0 ? void 0 : _b.titleProps)\n    });\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden: hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth\n    });\n    return React.createElement(Modal, __assign({}, mergedModalProps, {\n      className: classNames.root,\n      containerClassName: classNames.main,\n      onDismiss: onDismiss || mergedModalProps.onDismiss,\n      subtitleAriaId: this._getSubTextId(),\n      titleAriaId: this._getTitleTextId()\n    }), React.createElement(DialogContent, __assign({\n      subTextId: this._defaultSubTextId,\n      showCloseButton: mergedModalProps.isBlocking,\n      onDismiss: onDismiss\n    }, dialogContentProps), props.children));\n  };\n\n  DialogBase.defaultProps = {\n    hidden: true\n  };\n  DialogBase = __decorate([withResponsiveMode], DialogBase);\n  return DialogBase;\n}(React.Component);\n\nexport { DialogBase };","map":null,"metadata":{},"sourceType":"module"}