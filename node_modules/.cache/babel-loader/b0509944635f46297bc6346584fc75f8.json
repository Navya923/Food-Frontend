{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, getNativeProps, imgProperties } from '../../Utilities';\nimport { ImageCoverStyle, ImageFit, ImageLoadState } from './Image.types';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar SVG_REGEX = /\\.svg$/i;\nvar KEY_PREFIX = 'fabricImage';\n\nfunction useLoadState(props, imageElement) {\n  var onLoadingStateChange = props.onLoadingStateChange,\n      onLoad = props.onLoad,\n      onError = props.onError,\n      src = props.src;\n\n  var _a = React.useState(ImageLoadState.notLoaded),\n      loadState = _a[0],\n      setLoadState = _a[1]; // eslint-disable-next-line no-restricted-properties\n\n\n  React.useLayoutEffect(function () {\n    // If the src property changes, reset the load state\n    // (does nothing if the load state is already notLoaded)\n    setLoadState(ImageLoadState.notLoaded);\n  }, [src]); // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render\n\n  React.useEffect(function () {\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      var isLoaded = imageElement.current ? src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0 || imageElement.current.complete && SVG_REGEX.test(src) : false;\n\n      if (isLoaded) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    }\n  });\n  React.useEffect(function () {\n    onLoadingStateChange === null || onLoadingStateChange === void 0 ? void 0 : onLoadingStateChange(loadState); // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes\n  }, [loadState]);\n  var onImageLoaded = React.useCallback(function (ev) {\n    onLoad === null || onLoad === void 0 ? void 0 : onLoad(ev);\n\n    if (src) {\n      setLoadState(ImageLoadState.loaded);\n    }\n  }, [src, onLoad]);\n  var onImageError = React.useCallback(function (ev) {\n    onError === null || onError === void 0 ? void 0 : onError(ev);\n    setLoadState(ImageLoadState.error);\n  }, [onError]);\n  return [loadState, onImageLoaded, onImageError];\n}\n\nexport var ImageBase = React.forwardRef(function (props, forwardedRef) {\n  var frameElement = React.useRef();\n  var imageElement = React.useRef();\n\n  var _a = useLoadState(props, imageElement),\n      loadState = _a[0],\n      onImageLoaded = _a[1],\n      onImageError = _a[2];\n\n  var imageProps = getNativeProps(props, imgProperties, ['width', 'height']);\n  var src = props.src,\n      alt = props.alt,\n      width = props.width,\n      height = props.height,\n      _b = props.shouldFadeIn,\n      shouldFadeIn = _b === void 0 ? true : _b,\n      shouldStartVisible = props.shouldStartVisible,\n      className = props.className,\n      imageFit = props.imageFit,\n      role = props.role,\n      maximizeFrame = props.maximizeFrame,\n      styles = props.styles,\n      theme = props.theme,\n      loading = props.loading;\n  var coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    width: width,\n    height: height,\n    maximizeFrame: maximizeFrame,\n    shouldFadeIn: shouldFadeIn,\n    shouldStartVisible: shouldStartVisible,\n    isLoaded: loadState === ImageLoadState.loaded || loadState === ImageLoadState.notLoaded && props.shouldStartVisible,\n    isLandscape: coverStyle === ImageCoverStyle.landscape,\n    isCenter: imageFit === ImageFit.center,\n    isCenterContain: imageFit === ImageFit.centerContain,\n    isCenterCover: imageFit === ImageFit.centerCover,\n    isContain: imageFit === ImageFit.contain,\n    isCover: imageFit === ImageFit.cover,\n    isNone: imageFit === ImageFit.none,\n    isError: loadState === ImageLoadState.error,\n    isNotImageFit: imageFit === undefined\n  }); // If image dimensions aren't specified, the natural size of the image is used.\n\n  return React.createElement(\"div\", {\n    className: classNames.root,\n    style: {\n      width: width,\n      height: height\n    },\n    ref: frameElement\n  }, React.createElement(\"img\", __assign({}, imageProps, {\n    onLoad: onImageLoaded,\n    onError: onImageError,\n    key: KEY_PREFIX + props.src || '',\n    className: classNames.image,\n    ref: useMergedRefs(imageElement, forwardedRef),\n    src: src,\n    alt: alt,\n    role: role,\n    loading: loading\n  })));\n});\nImageBase.displayName = 'ImageBase';\n\nfunction useCoverStyle(props, loadState, imageElement, frameElement) {\n  var previousLoadState = React.useRef(loadState);\n  var coverStyle = React.useRef();\n\n  if (coverStyle === undefined || previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded) {\n    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);\n  }\n\n  previousLoadState.current = loadState;\n  return coverStyle.current;\n}\n\nfunction computeCoverStyle(props, loadState, imageElement, frameElement) {\n  var imageFit = props.imageFit,\n      width = props.width,\n      height = props.height; // Do not compute cover style if it was already specified in props\n\n  if (props.coverStyle !== undefined) {\n    return props.coverStyle;\n  } else if (loadState === ImageLoadState.loaded && (imageFit === ImageFit.cover || imageFit === ImageFit.contain || imageFit === ImageFit.centerContain || imageFit === ImageFit.centerCover) && imageElement.current && frameElement.current) {\n    // Determine the desired ratio using the width and height props.\n    // If those props aren't available, measure measure the frame.\n    var desiredRatio = void 0;\n\n    if (typeof width === 'number' && typeof height === 'number' && imageFit !== ImageFit.centerContain && imageFit !== ImageFit.centerCover) {\n      desiredRatio = width / height;\n    } else {\n      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;\n    } // Examine the source image to determine its original ratio.\n\n\n    var naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight; // Should we crop from the top or the sides?\n\n    if (naturalRatio > desiredRatio) {\n      return ImageCoverStyle.landscape;\n    }\n  }\n\n  return ImageCoverStyle.portrait;\n}","map":null,"metadata":{},"sourceType":"module"}