{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { getNativeProps, divProperties, classNamesFunction, getDocument, memoizeFunction, getRTL, Customizer, useFocusRects } from '../../Utilities';\nimport { createTheme } from '../../Styling';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar getFabricTheme = memoizeFunction(function (theme, isRTL) {\n  return createTheme(__assign(__assign({}, theme), {\n    rtl: isRTL\n  }));\n});\n\nvar getDir = function (_a) {\n  var theme = _a.theme,\n      dir = _a.dir;\n  var contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  var pageDir = getRTL() ? 'rtl' : 'ltr';\n  var componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir\n  };\n};\n\nexport var FabricBase = React.forwardRef(function (props, ref) {\n  var className = props.className,\n      theme = props.theme,\n      applyTheme = props.applyTheme,\n      applyThemeToBody = props.applyThemeToBody,\n      styles = props.styles;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    applyTheme: applyTheme,\n    className: className\n  });\n  var rootElement = React.useRef(null);\n  useApplyThemeToBody(applyThemeToBody, classNames, rootElement);\n  useFocusRects(rootElement);\n  return React.createElement(React.Fragment, null, useRenderedContent(props, classNames, rootElement, ref));\n});\nFabricBase.displayName = 'FabricBase';\n\nfunction useRenderedContent(props, _a, rootElement, ref) {\n  var root = _a.root;\n  var _b = props.as,\n      Root = _b === void 0 ? 'div' : _b,\n      dir = props.dir,\n      theme = props.theme;\n  var divProps = getNativeProps(props, divProperties, ['dir']);\n\n  var _c = getDir(props),\n      rootDir = _c.rootDir,\n      needsTheme = _c.needsTheme;\n\n  var renderedContent = React.createElement(Root, __assign({\n    dir: rootDir\n  }, divProps, {\n    className: root,\n    ref: useMergedRefs(rootElement, ref)\n  })); // Create the contextual theme if component direction does not match parent direction.\n\n  if (needsTheme) {\n    // Disabling ThemeProvider here because theme doesn't need to be re-provided by ThemeProvider if dir has changed.\n    renderedContent = // eslint-disable-next-line deprecation/deprecation\n    React.createElement(Customizer, {\n      settings: {\n        theme: getFabricTheme(theme, dir === 'rtl')\n      }\n    }, renderedContent);\n  }\n\n  return renderedContent;\n}\n\nfunction useApplyThemeToBody(applyThemeToBody, _a, rootElement) {\n  var bodyThemed = _a.bodyThemed;\n  React.useEffect(function () {\n    if (applyThemeToBody) {\n      var currentDoc_1 = getDocument(rootElement.current);\n\n      if (currentDoc_1) {\n        currentDoc_1.body.classList.add(bodyThemed);\n        return function () {\n          currentDoc_1.body.classList.remove(bodyThemed);\n        };\n      }\n    }\n  }, [bodyThemed, applyThemeToBody, rootElement]);\n  return rootElement;\n}","map":null,"metadata":{},"sourceType":"module"}